/* 
* Copyright (C) 2009-2015 Texas Instruments Incorporated - www.ti.com
* 
* 
*  Redistribution and use in source and binary forms, with or without 
*  modification, are permitted provided that the following conditions 
*  are met:
*
*    Redistributions of source code must retain the above copyright 
*    notice, this list of conditions and the following disclaimer.
*
*    Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the 
*    documentation and/or other materials provided with the   
*    distribution.
*
*    Neither the name of Texas Instruments Incorporated nor the names of
*    its contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT
*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION HOWEVER CAUSED AND ON ANY
*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
*  INCLUDING NEGLIGENCE OR OTHERWISE ARISING IN ANY WAY OUT OF THE USE
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/

/* USER CODE BEGIN (0) */
/* USER CODE END */

/* Include Files */

#include "HL_sys_common.h"
#include "HL_system.h"

/* USER CODE BEGIN (1) */
#include "HL_sys_core.h"
#include "HL_mibspi.h"
#include "HL_esm.h"
#include "HL_rti.h"
#include "HL_gio.h"
#include "HL_het.h"
bool EOT;
/* USER CODE END */

/** @fn void main(void)
*   @brief Application main function
*   @note This function is empty by default.
*
*   This function is called after startup.
*   The user can use this function to implement the application.
*/

/* USER CODE BEGIN (2) */
/* USER CODE END */

void main(void)
{
/* USER CODE BEGIN (3) */

    /* Initialize RTI driver */
    rtiInit();
    gioInit();
    gioSetDirection(gioPORTB,0x000000C0);


    /* Set high end timer GIO port hetPort pin direction to all output */
    gioSetDirection(hetPORT1, 0xFFFFFFFF);

    /* Enable RTI Compare 0 interrupt notification */
    rtiEnableNotification(rtiREG1,rtiNOTIFICATION_COMPARE0);

    /* Enable IRQ - Clear I flag in CPS register */
    /* Note: This is usually done by the OS or in an svc dispatcher */
    _enable_IRQ_interrupt_();

    /* Start RTI Counter Block 0 */
    rtiStartCounter(rtiREG1,rtiCOUNTER_BLOCK0);

    /* Run forever */
    while(1){
        Motore1 ( 10000, 0, 80000, 20, &EOT);
        }


/* USER CODE END */
}

/* USER CODE BEGIN (4) */


/* Note-You need to remove rtiNotification from notification.c to avoid redefinition */
void rtiNotification(rtiBASE_t *rtiREG, uint32 notification)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
    /* Toggle HET pin 0 */
    gioSetPort(hetPORT1, gioGetPort(hetPORT1) ^ 0x00000001);
    EOT=1;
}
void Motore1 (unsigned int impulsi, bool dir, int velocita, int Kaccelerazione, int *EOT){
    int R1, R2, R3, Passi=0, dPassi, Passifiniti;
    dPassi= (int)(impulsi/500);
    R1= (int)(500000/(((float)Kaccelerazione*(float)Passi)+1000));                     // accelerazione
    R2= (int)(500000/(float)velocita);                                                 // V massima
    R3= (int)(500000/(((float)Kaccelerazione*(float)(Passi-impulsi+(velocita/Kaccelerazione)))));    // decelerazione
    Passifiniti= Passi+dPassi;
    rtiSetPeriod(rtiREG1, rtiCOUNTER_BLOCK0, (Max(R1,R2,R3)*9));
    rtiStartCounter(rtiREG1,rtiCOUNTER_BLOCK0);
    while (Passi!=impulsi){
        if ((Passifiniti-Passi)==3){
            R1= (int)(500000/(((float)Kaccelerazione*(float)Passi)+1000));                     // accelerazione
            R2= (int)(500000/(float)velocita);                                                 // V massima
            R3= (int)(500000/(((float)Kaccelerazione*(float)(Passi-impulsi+(velocita/Kaccelerazione)))));    // decelerazione
        }
        if (Passi==Passifiniti){
            rtiSetPeriod(rtiREG1, rtiCOUNTER_BLOCK0, (Max(R1,R2,R3)*900));
            Passifiniti= Passi+dPassi;
            }
        if(Passi<Passifiniti){

            if(*EOT==1){
                *EOT=0;
                if (dir){
                    gioSetBit(gioPORTB,6,!gioGetBit(gioPORTB,6));   // avanti
                }else{
                    gioSetBit(gioPORTB,7,!gioGetBit(gioPORTB,7));   // indietro
                }
                Passi++;

            }
        }
    }
    rtiStopCounter(rtiREG1,rtiCOUNTER_BLOCK0);
}
int Max(int a, int b, int c){
    if (a<b){
        if (b<c){
            return c;
        }else{
            return b;
        }
    } else if(a<c){
        return c;
    }else{
        return a;
    }
}
/* USER CODE END */
