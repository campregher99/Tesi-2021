/** @file HL_sys_main.c 
*   @brief Application main file
*   @date 07-July-2017
*   @version 04.07.00
*
*   This file contains an empty main function,
*   which can be used for the application.
*/

/* 
* Copyright (C) 2009-2016 Texas Instruments Incorporated - www.ti.com  
* 
* 
*  Redistribution and use in source and binary forms, with or without 
*  modification, are permitted provided that the following conditions 
*  are met:
*
*    Redistributions of source code must retain the above copyright 
*    notice, this list of conditions and the following disclaimer.
*
*    Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the 
*    documentation and/or other materials provided with the   
*    distribution.
*
*    Neither the name of Texas Instruments Incorporated nor the names of
*    its contributors may be used to endorse or promote products derived
*    from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
*  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
*  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
*  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
*  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
*  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
*  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
*  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
*/


/* USER CODE BEGIN (0) */
/* USER CODE END */

/* Include Files */

#include "HL_sys_common.h"

/* USER CODE BEGIN (1) */
#include "HL_sys_core.h"
#include "HL_mibspi.h"
#include "HL_esm.h"
#include "HL_rti.h"
#include "HL_gio.h"
#include "HL_het.h"
#include "HL_eqep.h"
#include "HL_sys_core.h"
#include "HL_sci.h"
#include "HL_rti.h"
#include "funzioni"
#include "math.h"
#define UART sciREG1
int EOT;
bool dir,mot;
/* USER CODE END */

/** @fn void main(void)
*   @brief Application main function
*   @note This function is empty by default.
*
*   This function is called after startup.
*   The user can use this function to implement the application.
*/

/* USER CODE BEGIN (2) */
#define UNIT_POSITION_X 60U
/* USER CODE END */

void main(void)
{
/* USER CODE BEGIN (3) */
    sciInit();
    rtiInit();
    gioInit();

int impulsi;
    rtiEnableNotification(rtiREG1,rtiNOTIFICATION_COMPARE0);
    _enable_IRQ_interrupt_();


    uint16 deltaT1 = 0U, deltaT2 = 0U;
   // float velocity1 = 0U, velocity2 = 0U;
    /* EQEP initialization based on GUI Configuration. */
    QEPInit();

    /* Enable Position Counter */
    eqepEnableCounter(eqepREG1);
    eqepEnableCounter(eqepREG2);

    /* Enable Unit Timer. */
    eqepEnableUnitTimer(eqepREG1);
    eqepEnableUnitTimer(eqepREG2);

    /* Enable capture timer and capture period latch. */
    eqepEnableCapture(eqepREG1);
    eqepEnableCapture(eqepREG2);

    while(1)
    {
         if (sciReceiveByte(UART)=="i"){
             impulsi=0;
             mot=1;
             dir=1;
             if (sciReceiveByte(UART)=="1")
                 mot=0;
             if (sciReceiveByte(UART)=="-")
                 dir=0;
             while (sciReceiveByte(UART)!="c"){
             impulsi+=sciReceiveByte(UART);
             }
         }
         if (mot){
             Motore2 ( impulsi, dir, 80000, 10, &EOT);
         } else {
             Motore1 ( impulsi, dir, 80000, 10, &EOT);
         }
        /* Status flag is set to indicate that a new value is latched in the QCPRD register. */
        if((eqepREG1->QEPSTS & 0x80U) !=0U)
        {
            /* Elapsed time between unit position events */
            deltaT1 = eqepREG1->QCPRD;

            /* Calculate Velocity from deltaT and the value of the unit position. */
            /* The value of Unit Position is a sample value and should be changed by the User as per the actual value in the UNIT_POSITION_X macro above. */
            velocity1 = (float)(UNIT_POSITION_X/deltaT1);

            /* Clear the Status flag. */
            eqepREG1->QEPSTS |= 0x80U;
        }

        /* Status flag is set to indicate that a new value is latched in the QCPRD register. */
                if((eqepREG2->QEPSTS & 0x80U) !=0U)
                {
                    sciSendByte(UART,eqepReadStatus(eqepREG2));
                    /* Elapsed time between unit position events */
                    deltaT2 = eqepREG2->QCPRD;

                    /* Calculate Velocity from deltaT and the value of the unit position. */
                    /* The value of Unit Position is a sample value and should be changed by the User as per the actual value in the UNIT_POSITION_X macro above. */
                    velocity2 = (float)(UNIT_POSITION_X/deltaT2);

                    /* Clear the Status flag. */
                    eqepREG2->QEPSTS |= 0x80U;
                }
    }
/* USER CODE END */

}


/* USER CODE BEGIN (4) */
void rtiNotification(rtiBASE_t *rtiREG, uint32 notification)
{
/*  enter user code between the USER CODE BEGIN and USER CODE END. */
    /* Toggle HET pin 0 */
    gioSetPort(hetPORT1, gioGetPort(hetPORT1) ^ 0x00000001);
    EOT=1;
}

void sciDisplayText(sciBASE_t *sci, uint8 *text,uint32 length)
{
    while(length--)
    {
        while ((UART->FLR & 0x4) == 4); /* wait until busy */
        sciSendByte(UART,*text++);      /* send out text   */
    };
}
/* USER CODE END */
